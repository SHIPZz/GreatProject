// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CompleteTask = `-- name: CompleteTask :one
UPDATE tasks 
SET completed = true
WHERE id = $1
RETURNING id, name, description, completed, created_at, updated_at
`

func (q *Queries) CompleteTask(ctx context.Context, id int32) (*Task, error) {
	row := q.db.QueryRow(ctx, CompleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const CountTasks = `-- name: CountTasks :one
SELECT COUNT(*) FROM tasks
`

func (q *Queries) CountTasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, CountTasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountTasksByStatus = `-- name: CountTasksByStatus :one
SELECT COUNT(*) FROM tasks WHERE completed = $1
`

func (q *Queries) CountTasksByStatus(ctx context.Context, completed pgtype.Bool) (int64, error) {
	row := q.db.QueryRow(ctx, CountTasksByStatus, completed)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTask = `-- name: CreateTask :one
INSERT INTO tasks (name, description, completed)
VALUES ($1, $2, $3)
RETURNING id, name, description, completed, created_at, updated_at
`

type CreateTaskParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Completed   pgtype.Bool `json:"completed"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (*Task, error) {
	row := q.db.QueryRow(ctx, CreateTask, arg.Name, arg.Description, arg.Completed)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks 
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteTask, id)
	return err
}

const GetTask = `-- name: GetTask :one
SELECT id, name, description, completed, created_at, updated_at 
FROM tasks 
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (*Task, error) {
	row := q.db.QueryRow(ctx, GetTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListTasks = `-- name: ListTasks :many
SELECT id, name, description, completed, created_at, updated_at 
FROM tasks 
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]*Task, error) {
	rows, err := q.db.Query(ctx, ListTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTasksByStatus = `-- name: ListTasksByStatus :many
SELECT id, name, description, completed, created_at, updated_at 
FROM tasks 
WHERE completed = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTasksByStatusParams struct {
	Completed pgtype.Bool `json:"completed"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) ListTasksByStatus(ctx context.Context, arg ListTasksByStatusParams) ([]*Task, error) {
	rows, err := q.db.Query(ctx, ListTasksByStatus, arg.Completed, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UncompleteTask = `-- name: UncompleteTask :one
UPDATE tasks
SET completed = false
WHERE id = $1
RETURNING id, name, description, completed, created_at, updated_at
`

func (q *Queries) UncompleteTask(ctx context.Context, id int32) (*Task, error) {
	row := q.db.QueryRow(ctx, UncompleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdateTask = `-- name: UpdateTask :one
UPDATE tasks 
SET name = $2, description = $3, completed = $4
WHERE id = $1
RETURNING id, name, description, completed, created_at, updated_at
`

type UpdateTaskParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Completed   pgtype.Bool `json:"completed"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (*Task, error) {
	row := q.db.QueryRow(ctx, UpdateTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Completed,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
